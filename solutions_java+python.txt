Python Solution: 
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root is None:
            return None

        # If the root is one of p or q, then it is the LCA
        if root == p or root == q:
            return root

        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)

        # If both TreeNodes lie in left or right then their LCA is in left or right,
        # Otherwise root is their LCA
        if left is not None and right is not None:
            return root

        return left if left is not None else right


Java solution:
1. public TreeNode lowestCommonAncestor(TreeNode root, TreeNode a, TreeNode b) {
        if (root == null) {
            return null;
        }

        // If the root is one of a or b, then it is the LCA
        if (root == a || root == b) {
            return root;
        }

        TreeNode left = lowestCommonAncestor(root.left, a, b);
        TreeNode right =lowestCommonAncestor(root.right, a, b);

        // If both TreeNodes lie in left or right then their LCA is in left or right,
        // Otherwise root is their LCA
        if (left != null && right != null) {
            return root;
        }

        return (left != null) ? left : right;
    }

2. public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        int max = Math.max(p.val, q.val);
        int min = Math.min(p.val, q.val);
        while (max<root.val||min>root.val) {
            root=root.val<min?root.right:root.left;
        }
        return root;
    }